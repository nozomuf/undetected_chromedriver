name: Build Lambda Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: 📦 Install dependencies
        run: |
          mkdir -p build
          pip install undetected-chromedriver -t build/

      - name: ⚙️ Download Headless Chrome & Chromedriver (latest)
        run: |
          # Lambda 用の headless-chromium をダウンロード
          curl -L https://github.com/shelfio/chrome-aws-lambda/releases/latest/download/headless-chromium -o build/headless-chromium
          chmod +x build/headless-chromium

          # ---- 最新の ChromeDriver を自動取得 ----
          echo "Fetching latest ChromeDriver version..."
          
          # 正しいキー名 'Stable' を使う
          LATEST=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json \
            | jq -r '.channels.Stable.version')
          
          echo "Latest version: $LATEST"
          
          # バージョンが取得できなければ終了
          if [ "$LATEST" = "null" ] || [ -z "$LATEST" ]; then
            echo "❌ Error: ChromeDriver version could not be determined."
            exit 1
          fi
          
          # URL を取得（バージョン一致、かつ platform=linux64）
          DRIVER_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json \
            | jq -r --arg ver "$LATEST" '.versions[] | select(.version == $ver) | .downloads.chromedriver[] | select(.platform == "linux64") | .url')
          
          echo "Download URL: $DRIVER_URL"
          
          # URL が取得できなければエラー
          if [ -z "$DRIVER_URL" ]; then
            echo "❌ Error: ChromeDriver download URL not found."
            exit 2
          fi
          curl -L "$DRIVER_URL" -o chromedriver.zip

          unzip chromedriver.zip -d build/
          mv build/chromedriver-linux64/chromedriver build/chromedriver
          rm -rf chromedriver.zip build/chromedriver-linux64

          chmod +x build/chromedriver
      - name: 🧩 Add lambda function code
        run: |
          cp lambda_function.py build/

      - name: 🗜️ Create deployment package
        run: |
          cd build
          zip -r ../lambda_package.zip .

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda_package
          path: lambda_package.zip
