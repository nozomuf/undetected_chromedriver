name: Build Lambda Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: 📦 Install dependencies
        run: |
          mkdir -p build
          pip install undetected-chromedriver -t build/

      - name: ⚙️ Download Headless Chrome & Chromedriver (latest)
        run: |
          echo "Fetching ChromeDriver download URL..."

          JSON=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json)
          
          # バージョンの推定（channels.Stable or channels.Stable.version 等を試す）
          LATEST=$(echo "$JSON" | jq -r '.channels.Stable.version // empty')
          
          if [ -z "$LATEST" ]; then
            echo "Error: Could not get latest version from channels.Stable.version"
            exit 1
          fi
          
          echo "Latest version: $LATEST"
          
          # 該当するバージョンの entry を探す
          VERSION_OBJ=$(echo "$JSON" | jq --arg ver "$LATEST" '.versions[] | select(.version == $ver)')
          
          if [ -z "$VERSION_OBJ" ] || [ "$VERSION_OBJ" = "null" ]; then
            echo "Error: No matching version entry for $LATEST"
            exit 2
          fi
          
          # downloads.chromedriver 配列を取得
          DRIVERS=$(echo "$VERSION_OBJ" | jq -r '.downloads.chromedriver // empty')
          
          if [ -z "$DRIVERS" ]; then
            echo "Error: downloads.chromedriver is missing"
            exit 3
          fi
          
          # linux64 用 URL を探す
          DRIVER_URL=$(echo "$DRIVERS" | jq -r '.[] | select(.platform == "linux64") | .url' | head -n1)
          
          if [ -z "$DRIVER_URL" ]; then
            echo "Error: no linux64 chromedriver URL found"
            exit 4
          fi
          
          echo "Download URL: $DRIVER_URL"

          curl -L "$DRIVER_URL" -o chromedriver.zip

          unzip chromedriver.zip -d build/
          mv build/chromedriver-linux64/chromedriver build/chromedriver
          rm -rf chromedriver.zip build/chromedriver-linux64

          chmod +x build/chromedriver
      - name: 🧩 Add lambda function code
        run: |
          cp lambda_function.py build/

      - name: 🗜️ Create deployment package
        run: |
          cd build
          zip -r ../lambda_package.zip .

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda_package
          path: lambda_package.zip
