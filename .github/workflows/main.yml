name: Build Lambda Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: 📦 Install dependencies
        run: |
          mkdir -p build
          pip install undetected-chromedriver -t build/

      - name: ⚙️ Download Headless Chrome & Chromedriver (latest)
        run: |
          set -e

          TARGET_VERSION="141.0.7390.78"
          BASE_JSON_URL="https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
          
          echo "Fetching JSON..."
          JSON=$(curl -s "$BASE_JSON_URL")
          
          if [ -z "$JSON" ]; then
            echo "Error: Cannot fetch JSON from $BASE_JSON_URL"
            exit 1
          fi
          
          echo "Target ChromeDriver version: $TARGET_VERSION"
          
          # まず JSON 内にこのバージョンの情報があるか探す
          MATCH=$(echo "$JSON" | jq -r --arg ver "$TARGET_VERSION" '.versions[] | select(.version == $ver)')
          
          if [ -z "$MATCH" ] || [ "$MATCH" = "null" ]; then
            echo "Warning: version $TARGET_VERSION not found in JSON versions[]. Falling back to direct URL."
            # 直接 URL を使う
            DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${TARGET_VERSION}/linux64/chromedriver-linux64.zip"
          else
            # JSON に存在するなら、downloads.chromedriver から platform=linux64 の URL を使う
            DRIVER_URL=$(echo "$MATCH" | jq -r '.downloads.chromedriver[] | select(.platform == "linux64") | .url')
            if [ -z "$DRIVER_URL" ] || [ "$DRIVER_URL" = "null" ]; then
              echo "Warning: No linux64 download URL in JSON for version $TARGET_VERSION. Using direct URL."
              DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${TARGET_VERSION}/linux64/chromedriver-linux64.zip"
            fi
          fi

          curl -L "$DRIVER_URL" -o chromedriver.zip

          unzip chromedriver.zip -d build/
          mv build/chromedriver-linux64/chromedriver build/chromedriver
          rm -rf chromedriver.zip build/chromedriver-linux64

          chmod +x build/chromedriver
      - name: 🧩 Add lambda function code
        run: |
          cp lambda_function.py build/

      - name: 🗜️ Create deployment package
        run: |
          cd build
          zip -r ../lambda_package.zip .

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda_package
          path: lambda_package.zip
